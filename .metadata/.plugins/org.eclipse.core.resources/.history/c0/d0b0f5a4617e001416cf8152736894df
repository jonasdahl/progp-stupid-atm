import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * A class for a bank account
 * 
 * @author Jonas Dahl & Nick Nyman
 * @version 1.0
 * @date 2014-11-29
 */
public class Account {
	/** The id in the database file. */
	private int id;
	/** The personal identification number. Personnummer. */
	private String personalID;
	/** The name of the account holder. */
	private String name;
	/** The card number associated with this person. */
	private int cardNumber;
	/** The pin code associated with the card. */
	private int pinCode;
	/** The actual account balance for the person. */
	private int balance;
	/** The possible correct codes for the user. */
	private static ArrayList<String> authcodes;

	/**
	 * Loads user, if it exists, from the database into this object.
	 * 
	 * @return user_id > 0 if user existed and the card number and pin code were
	 *         right, 0 if card number or pin code were wrong
	 */
	public int verifyAndLoad(String cardNo, String pinC) throws IOException {
		try {
			FileReader fl = new FileReader("src/accounts.txt");
			BufferedReader br = new BufferedReader(fl);
			ATMServer.log("Database opened.");

			String line;
			while ((line = br.readLine()) != null) {
				String[] parts = line.split("\\|");
				if (parts.length != 6) {
					ATMServer.log("Error in database file: "
							+ Arrays.toString(parts));
					continue;
				}
				if (parts[3].trim().equals(cardNo)
						&& parts[4].trim().equals(pinC)) {
					id = Integer.parseInt(parts[0].trim());
					personalID = parts[1].trim();
					name = parts[2].trim();
					cardNumber = Integer.parseInt(parts[3].trim());
					pinCode = Integer.parseInt(parts[4].trim());
					balance = Integer.parseInt(parts[5].trim());
					authcodes = new ArrayList<String>(Arrays.asList("01", "03",
							"05", "07", "09", "11", "13", "15", "17", "19",
							"21", "23", "25", "27", "29", "31", "33", "35",
							"37", "39", "41", "43", "45", "47", "49", "51",
							"53", "55", "57", "59", "61", "63", "65", "67",
							"69", "71", "73", "75", "77", "79", "81", "83",
							"85", "87", "89", "91", "93", "95", "97", "99"));
					br.close();
					return id;
				}
			}
			br.close();
		} catch (IOException e) {
			// We want to log and continue the exception
			ATMServer.log("Database read failed:");
			ATMServer.log(e.getMessage());
			throw new IOException();
		}
		ATMServer.log("Failed to find user.");
		return 0;
	}

	/**
	 * Checks whether the entered two-digit authorization code is among the
	 * correct ones.
	 * 
	 * @param enteredCode
	 *            the code to be verified
	 * @return boolean value, true if code is correct false if not
	 */
	public boolean authorize(String enteredCode) {
		if (authcodes.contains(enteredCode)) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Returns the current balance from the account.
	 * 
	 * @return double value of account balance, in cents (smallest possible unit
	 *         of currency).
	 */
	public int getBalance() {
		return balance;
	}

	/**
	 * Updates the balance in the account and the database.
	 * 
	 * @param addValue
	 *            the value to be added to the account, an error
	 *            (NEGATIVE_ERROR) if input parameter is < 0
	 */
	public String deposit(int addValue) {
		if (addValue < 0)
			return ATMServerThread.NEGATIVE_ERROR;
		this.balance = this.balance + addValue;
		editBalance();
		return "" + balance;
	}

	private boolean editBalance() {
		String fileText = "";
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader("src/accounts.txt"));
			StringBuilder sb = new StringBuilder();
			String line = br.readLine();
			while (line != null) {
				String[] parts = line.split("\\|");
				if (parts.length == 6) {
					if (parts[0].trim().equals("" + id)) {
						line = id + " | " + personalID + " | " + name + " | "
								+ cardNumber + " | " + pinCode + " | "
								+ balance;
					}
				}
				sb.append(line);
				sb.append("\n");
				line = br.readLine();
			}
			fileText = sb.toString();
			br.close();
			PrintWriter writer = new PrintWriter("src/accounts.txt", "UTF-8");
			writer.print(fileText);
			writer.close();
		} catch (IOException e) {
			ATMServer.log("Database read failed:");
			ATMServer.log(e.getMessage());
			return false;
		}
		return true;
	}

	/**
	 * Considers a withdraw a negative deposit
	 * 
	 * @param withdrawn
	 *            amount
	 * @throws IOException
	 */
	public String withdraw(int withdrawn) throws IOException {
		if (withdrawn < 0)
			return ATMServerThread.NEGATIVE_ERROR;
		if (balance < withdrawn)
			return ATMServerThread.BROKE_ERROR;
		this.balance = this.balance - withdrawn;
		editBalance();
		return "" + balance;
	}

	public boolean isSet() {
		if (id > 0)
			return true;
		return false;
	}
}
