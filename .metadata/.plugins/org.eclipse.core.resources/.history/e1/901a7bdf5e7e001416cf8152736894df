import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.net.UnknownHostException;

/**
 * @author Jonas Dahl & Nick Nyman.
 * @version 1.0
 * @date 2014-11-28
 */
public class ATMClient {
	/** Some constants for user input. */
	private final static int DEPOSIT = 1;
	private final static int WITHDRAW = 2;
	private final static int BALANCE = 3;
	private final static int QUIT = 4;
	private final static int LANGUAGE = 5;

	/** Specifies port number. */
	private static int portNumber = 8989;
	/** Specifies host name. */
	private static String hostName = "127.0.0.1";
	/** Stores info about language. */
	private static Language t;
	/** Socket to server. */
	private static Socket socket;
	/** Out-stream to server. */
	private static PrintWriter out;
	/** In-stream from server. */
	private static BufferedReader in;
	/** In-stream from standard in. */
	private static BufferedReader stdIn;
	/** The current version number. */
	private int version;

	/**
	 * Initializes ATMClient, sets socket, out, in and so on. Exits program if
	 * error occurs when initializing those variables and prints some part of
	 */
	public ATMClient() {
		this.version = Integer.MAX_VALUE;
		try {
			t = new Language("enUS"); // Default language is English.
		} catch (IOException e) {
			System.out.println("An error occurred when reading language file.");
			System.exit(1);
		}
		socket = null;
		out = null;
		in = null;
		stdIn = null;

		try {
			socket = new Socket(hostName, portNumber);
			out = new PrintWriter(socket.getOutputStream(), true);
			in = new BufferedReader(new InputStreamReader(
					socket.getInputStream()));
			stdIn = new BufferedReader(new InputStreamReader(System.in));
			BufferedReader versionBR = new BufferedReader(new FileReader(
					"version.txt"));
			String version = versionBR.readLine();
			if (version != null) {
				this.version = Integer.parseInt(version.trim());
			}
			versionBR.close();
		} catch (UnknownHostException e) {
			System.err.println(t.t("unknown_host") + " " + hostName);
			System.exit(1);
		} catch (IOException e) {
			System.err.println(t.t("no_io") + " " + hostName);
			System.exit(1);
		}
	}

	/**
	 * Takes care of program initialization. Creates a new ATMClient object and
	 * runs it.
	 * 
	 * @param args
	 *            not used
	 * @throws IOException
	 */
	public static void main(String[] args) {
		if (args.length != 2) {
			System.out.println("Usage: ATMClient [ipaddress] [port]");
			System.out.println("The IP-address and port are to the server.");
			System.exit(1);
		}
		ATMClient client = new ATMClient();
		client.start();
	}

	/**
	 * Reads one line (until \n) from standard input. Blocks until there is a
	 * line to read.
	 * 
	 * @return the string that has been read
	 * @exits if the read gives an IOException
	 */
	private String readLine(BufferedReader reader) {
		String line = "";
		try {
			line = reader.readLine();
		} catch (IOException e) {
			System.out.println(t.e("error"));
			System.exit(1);
		}
		return line;
	}

	/**
	 * Turns text string to double. For example " 443,2" ==> 443.2 or
	 * "  44.22  " ==> 44.22
	 * 
	 * @param text
	 *            the string to be parsed
	 * @return the double parsed from the string or -1 if the string couldn't be
	 *         parsed
	 */
	private double grabDoubleFromText(String text) {
		double value = 0;
		try {
			value = Double.parseDouble(text.trim().replace(',', '.'));
		} catch (NumberFormatException e) {
			value = -1;
		}
		return value;
	}

	/**
	 * Turns text string to int. For example " 443" ==> 443 or "  44.9  " ==> 44
	 * 
	 * @param text
	 *            the string to be parsed
	 * @return the double parsed from the string or -1 if the string couldn't be
	 *         parsed
	 */
	private int grabIntFromText(String text) {
		return (int) grabDoubleFromText(text);
	}

	/**
	 * Runs the client process. Displays the menu to the user periodically on
	 * stdOut.
	 * 
	 * @prints menu when menu is supposed to be printed. an error if server
	 *         socket error occurred
	 */
	public void start() {
		String line;
		boolean innerLoop = true, outerLoop = true;
		while (outerLoop) {
			clearScreen();
			System.out.println(t.t("welcome"));
			line = readLine(stdIn);
			if (line == null) {
				// We had an awkward problem, the server left us
				System.out.println(t.e("error"));
				break;
			} else {
				update();
				login(); // Login calls itself if the user fails to login, so
							// after this point, we know user's logged in
			}

			// This is what we want to do all the time now: print menu - listen
			// to user
			while (innerLoop) {
				clearScreen();
				System.out.println(t.t("menu"));
				int choice = grabIntFromText(readLine(stdIn));
				clearScreen();
				switch (choice) {
				case DEPOSIT:
					deposit();
					update();
					break;
				case WITHDRAW:
					withdraw();
					update();
					break;
				case BALANCE:
					balance();
					update();
					break;
				case LANGUAGE:
					language();
					update();
					break;
				case QUIT:
					clearScreen();
					out.println("Q"); // Means that server can leave us
					innerLoop = outerLoop = false;
					break;
				}
				enterToContinue();
			}
		}
	}

	/**
	 * Clears everything from terminal window on most platforms.
	 * 
	 * @prints some ascii characters to stdout and flushes.
	 */
	public static void clearScreen() {
		final String ANSI_CLS = "\u001b[2J";
		final String ANSI_HOME = "\u001b[H";
		System.out.print(ANSI_CLS + ANSI_HOME);
		System.out.flush();
	}

	/**
	 * Handles login.
	 * 
	 * @prints to stdout: clears screen and prints "login" to user, then asks
	 *         for card number and pincode to socket: sending "L", card number
	 *         and pin code to socket
	 * @reads from stdin once after asked for card number and once after asking
	 *        for pin code then reads from socket to get response
	 */
	public void login() {
		clearScreen();
		System.out.println(t.t("login"));
		System.out.print(t.t("card_number") + ": "); // Ask for card number
		String cardNumber = readLine(stdIn);
		System.out.print(t.t("pincode") + ": "); // Ask for pin code
		String pinCode = readLine(stdIn);
		out.println("L"); // Send an "L" for login (to server)
		out.println(cardNumber); // Send card number
		out.println(pinCode); // Send pin code
		String response = readLine(in);
		if (response.startsWith(C.ERROR)) {
			System.out.println(t.e(response));
			enterToContinue();
			login(); // Nytt försök
		} else {
			System.out.println(t.t("logged_in"));
			enterToContinue();
		}
	}

	/**
	 * Handles deposit.
	 * 
	 * @prints to stdout: some info and questions about the deposit. to socket:
	 *         first "D", then the code and amount
	 * @reads from stdin: some answers on questions about the withdrawal from
	 *        socket: the response, if the deposit was successful or not
	 */
	public void deposit() {
		System.out.println(t.t("deposit"));
		System.out.print(t.t("amount") + ": "); // Ask for amount
		int amount = (int) (grabDoubleFromText(readLine(stdIn)) * 100);
		out.println("D"); // Send a "D" for Deposit
		out.println(amount); // Send amount
		String response = readLine(in);
		if (response.startsWith(C.ERROR)) {
			System.out.println(t.e(response));
		} else {
			System.out.println(t.t("you_have") + " " + t.t("currency") + " "
					+ ((double) Integer.parseInt(response) / 100) + " "
					+ t.t("on_account"));
		}
	}

	/**
	 * Handles withdraw.
	 * 
	 * @prints to stdout: some info and questions about the withdrawal. to
	 *         socket: first "W", then the code and amount
	 * @reads from stdin: some answers on questions about the withdrawal from
	 *        socket: the response, if the withdrawal was successful or not
	 */
	public void withdraw() {
		System.out.println(t.t("withdraw"));
		System.out.print(t.t("two_digit_code") + ": "); // Ask for code
		String code = readLine(stdIn);
		System.out.print(t.t("amount") + ": "); // Ask for amount
		int amountCents = (int) (grabDoubleFromText(readLine(stdIn)) * 100);
		out.println("W"); // Send a "W" for withdrawal
		out.println(code); // Send code
		out.println(amountCents); // Send amount
		String response = readLine(in);
		if (response.startsWith(C.ERROR)) {
			System.out.println(t.e(response));
		} else {
			System.out.println(t.t("you_have") + " " + t.t("currency") + " "
					+ ((double) amountCents / 100) + " " + t.t("in_cash"));
			System.out.println(t.t("you_have") + " " + t.t("currency") + " "
					+ ((double) Integer.parseInt(response) / 100) + " "
					+ t.t("on_account"));
		}
	}

	/**
	 * Handles when the user requests balance.
	 * 
	 * @prints to stdout: info about the state
	 * @reads from socket: the response from the server
	 */
	private void balance() {
		System.out.println(t.t("balance"));
		out.println("B"); // Send a "B" for balance
		String response = readLine(in);
		if (response.startsWith(C.ERROR)) {
			System.out.println(t.e(response));
		} else {
			System.out.println(t.t("you_have") + " " + t.t("currency") + " "
					+ ((float) Integer.parseInt(response) / 100) + " "
					+ t.t("on_account"));
		}
	}

	/**
	 * Handles when the user requests to change language.
	 * 
	 * @prints to stdout: the language question
	 * @reads from stdin: the language user wants
	 */
	private void language() {
		System.out.println(t.t("language_question")); // Ask for language
		String answer = readLine(stdIn);
		try {
			t = new Language(answer);
			System.out.println(t.t("language_changed"));
		} catch (IOException e) {
			System.out.println(t.e(C.ERROR_LANGUAGE));
		}
	}

	/**
	 * @prints a text that tells the user to push enter to continue
	 * @reads the enter, or anything until next newline (see readLine's specs)
	 */
	private void enterToContinue() {
		System.out.print(t.t("enter"));
		readLine(stdIn); // Throw away enter
	}

	/**
	 * Sets current version to given parameter. Writes to the file version.txt,
	 * the number given as parameter. Also saves in object.
	 * 
	 * @param version
	 *            the version to set current client version to.
	 * @prints error message if write to file unsuccessful, and exits if so
	 */
	private void setVersion(int version) {
		this.version = version;
		try {
			PrintWriter writer = new PrintWriter("version.txt", "UTF-8");
			writer.print(version);
			writer.close();
		} catch (FileNotFoundException | UnsupportedEncodingException e) {
			System.out.println("Couldn't update client.");
			System.exit(1);
		}
	}

	/**
	 * Returns the current version of the client. Should be updated on creation
	 * of new ATMClient object and on update.
	 * 
	 * @return the actual version
	 */
	private int getVersion() {
		return version;
	}

	/**
	 * Updates the client's language and version files to the last version. If
	 * there is no new version, nothing will be done, but it will always check
	 * with server. Also sets the version to the latest.
	 * 
	 * @prints a message to the user if the client was updated
	 */
	private void update() {
		out.println("U");
		out.println(getVersion());
		String response = readLine(in);
		switch (response.trim()) {
		case C.STATUS_OK:
			return;
		case C.STATUS_UPDATE:
			String action = readLine(in);
			if (action.trim().equalsIgnoreCase(C.STATUS_LANGUAGE)) {
				updateLanguageFiles();
			}
			System.out.println(t.t("updated"));
			break;
		}
		int version = Integer.parseInt(readLine(in));
		setVersion(version);
	}

	/**
	 * Updates the language files. Supposed to be called during an update, when
	 * "U" has been sent to the server together with current version number
	 * and two responses has been read.
	 * @prints nothing to stdOut and nothing to serverSocket
	 * @reads plenty of things from server - see the protocol for more info
	 */
	private void updateLanguageFiles() {
		// Read files in eternity (HAHAH! No! Just until we stop it, take it easy...)
		while (true) {
			String type = readLine(in); 
			if (!type.equals(C.STATUS_FILE)) { // Everything should be a file, because it's the only thing we support today
				System.out.println(t.e("error"));
				System.exit(1);
			}
			if (type.equals(C.STATUS_END)) // If all the files we should read have been read, it's over. Whäwhäwäwä. :(
				break;
			
			String fileName = readLine(in);
			int length = grabIntFromText(readLine(in));
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < length; i++) {
				sb.append(readLine(in));
				sb.append("\n");
			}
			String file = sb.toString();
			PrintWriter writer;
			try {
				writer = new PrintWriter("" + fileName, "UTF-8");
				writer.print(file);
				writer.close();
			} catch (FileNotFoundException | UnsupportedEncodingException e) {
				System.out.println(e.getMessage());
				System.exit(1);
			} // TODO Error handling
		}
		try {
			t.update();
		} catch (IOException e) {/* TODO ERROR */
		}
	}
}
