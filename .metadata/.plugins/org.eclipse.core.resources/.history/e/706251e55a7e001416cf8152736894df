import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.net.UnknownHostException;

/**
   @author Jonas Dahl & Nick Nyman.
   @version 1.0
   @date 2014-11-28
*/
public class ATMClient {
    /** Some constants for user input. */
    private final static int DEPOSIT= 1;
    private final static int WITHDRAW = 2;
    private final static int BALANCE = 3;
    private final static int QUIT = 4;
    private final static int LANGUAGE = 5;
    
	/** Specifies port number. */
    private static int portNumber = 8989;
    /** Specifies host name. */
    private static String hostName = "127.0.0.1";
    /** Stores info about language. */
    private static Language t;
    /** Socket to server. */
    private static Socket socket;
    /** Out-stream to server. */
    private static PrintWriter out;
    /** In-stream from server. */
    private static BufferedReader in;
    /** In-stream from standard in. */
    private static BufferedReader stdIn;
    /** The current version number. */
    private static int version;
    
    /**
     * Initializes ATMClient, sets socket, out, in and so on. Exits program if error occurs when
     * initializing those variables and prints some part of 
     */
    public ATMClient() {
    	this.version = Integer.MAX_VALUE;
    	try {
			t = new Language("enUS"); // Default language is English.
		} catch (IOException e) {
			System.out.println("An error occurred when reading language file.");
			System.exit(1);
		}	
        socket = null;
        out = null;
        in = null;
        stdIn = null;
        
        try {
            socket = new Socket(hostName, portNumber);
            out = new PrintWriter(socket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            stdIn = new BufferedReader(new InputStreamReader(System.in));
            BufferedReader versionBR = new BufferedReader(new FileReader("version.txt"));
            String version = versionBR.readLine();
            if (version != null) {
            	this.version = Integer.parseInt(version.trim());
            }
        } catch (UnknownHostException e) {
            System.err.println(t.t("unknown_host") + " " + hostName);
            System.exit(1);
        } catch (IOException e) {
            System.err.println(t.t("no_io") + " " + hostName);
            System.exit(1);
        }
    }
    
    /**
     * Takes care of program initialization. Creates a new ATMClient object and runs it.
     * @param args not used
     * @throws IOException 
     */
    public static void main(String[] args) {
    	if (args.length != 2) {
    		System.out.println("Usage: ATMClient [ipaddress] [port]");
    		System.out.println("The IP-address and port are to the server.");
    		System.exit(1);
    	}
    	ATMClient client = new ATMClient();
    	client.start();   
    }
    
    /**
     * Reads one line (until \n) from standard input. Blocks until there is a line to read.
     * @return the string that has been read
     * @exits if the read gives an IOException
     */
    private String readLine(BufferedReader reader) {
    	String line = "";
    	try {
			line = reader.readLine();
		} catch (IOException e) {
			System.out.println(t.e("error"));
			System.exit(1);
		}
    	return line;
    }

    /**
     * Turns text string to double. For example " 443,2" ==> 443.2 or "  44.22  " ==> 44.22
     * @param text the string to be parsed
     * @return the double parsed from the string or -1 if the string couldn't be parsed
     */
    private double grabDoubleFromText(String text) {
    	double value = 0;
    	try {
    		value = Double.parseDouble(text.trim().replace(',', '.'));
    	} catch (NumberFormatException e) {
    		value = -1;
    	}
    	return value;
    }

    /**
     * Turns text string to int. For example " 443" ==> 443 or "  44.9  " ==> 44
     * @param text the string to be parsed
     * @return the double parsed from the string or -1 if the string couldn't be parsed
     */
    private int grabIntFromText(String text) {
    	return (int) grabDoubleFromText(text);
    }
    
    /**
     * Runs the client process.
     * Displays the menu to the user.
     * @prints menu when menu is supposed to be printed.
     */
    public void start() {
    	String line;
    	Handler handler = new Handler(this);
        boolean innerLoop = true, outerLoop = true;
        while (outerLoop) {
            clearScreen();
        	System.out.println(t.t("loginpage"));
        	line = readLine(stdIn);
        	if (line == null) {
        		break;
        	} else {
				checkVersion();
        		login();
        	}
        	while (innerLoop) {
        		clearScreen();
        		System.out.println(t.t("menu"));
		    	int choice = grabIntFromText(readLine(stdIn));
		    	switch (choice) {
		    	case DEPOSIT:
		    		h.deposit();
		    		h.update();
		    		break;
		    	case WITHDRAW: 
		    		h.withdraw();
		    		h.update();
		    		break;
		    	case BALANCE: 
		    		h.balance();
		    		h.update();
		    		break;
		    	case LANGUAGE: // Change language
		    		h.language();
		    		h.update();
		    		break;
		    	case QUIT:
		    		h.clearScreen();
		    		out.println("Q"); // Send a "Q" for byebye
		    		cont = false;
		    		outerLoop = false;
		    		break;
		    	}
        	}
        }
    }
    
    
    
    /**
     * @prints a text that tells the user to push enter to continue
     * @reads the enter, or anything to next newline
     */
    private void enterToContinue() {
    	System.out.print(t.t("enter"));
		readLine(stdIn); // Throw away enter
	}
    
    private void setVersion(int version) {
    	this.version = version;
		try {
			PrintWriter writer = new PrintWriter("version.txt", "UTF-8");
	    	writer.print(version);
	    	writer.close();
		} catch (FileNotFoundException | UnsupportedEncodingException e) {}
	}
    
    private int getVersion() {
		return version;
	}
}   
